
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Amanda Wang
 */
public class ViewConsultationSlot extends javax.swing.JFrame {
    private final String studentID;

    /**
     * Creates new form ViewConsultationSlot
     * @param studentID
     */
    
    public ViewConsultationSlot(String studentID) {
        initComponents();
        this.studentID = studentID;
        
        setTitle("View and Book Consultation");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        String usersFilePath = "users.txt"; // Path to the users file

        SelectLecturer.removeAllItems(); // Clear any existing items
        SelectLecturer.addItem("Select a Lecturer"); // Add default option

        try (BufferedReader reader = new BufferedReader(new FileReader(usersFilePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] userData = line.split(","); // Assuming format: userID,Username,Full Name,Password,User Type
                if (userData.length == 5 && userData[4].trim().equalsIgnoreCase("Lecturer")) {
                    String lecturerID = userData[0].trim(); // userID
                    String fullName = userData[2].trim(); // Full Name
                    SelectLecturer.addItem(lecturerID + " - " + fullName); // Add to dropdown
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading users file: " + e.getMessage(), "File Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Title = new javax.swing.JLabel();
        BackToHomepage = new javax.swing.JButton();
        SelectLecturer = new javax.swing.JComboBox<>();
        BookConsultation = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ConsultationTable = new javax.swing.JTable();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Title.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Title.setText("Available Consultation Slots");
        getContentPane().add(Title, new org.netbeans.lib.awtextra.AbsoluteConstraints(291, 20, 252, -1));

        BackToHomepage.setText("Back");
        BackToHomepage.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BackToHomepage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BackToHomepage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackToHomepageActionPerformed(evt);
            }
        });
        getContentPane().add(BackToHomepage, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 400, 110, 61));

        SelectLecturer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a Lecturer" }));
        SelectLecturer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SelectLecturer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectLecturerActionPerformed(evt);
            }
        });
        getContentPane().add(SelectLecturer, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 140, 30));

        BookConsultation.setText("Book Consultation");
        BookConsultation.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BookConsultation.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BookConsultation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookConsultationActionPerformed(evt);
            }
        });
        getContentPane().add(BookConsultation, new org.netbeans.lib.awtextra.AbsoluteConstraints(697, 190, 130, 50));

        ConsultationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Start Time", "End Time", "Student ID"
            }
        ));
        jScrollPane1.setViewportView(ConsultationTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 60, 490, 400));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/JavaStudentBackground.png"))); // NOI18N
        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void BackToHomepageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackToHomepageActionPerformed
        dispose();
    }//GEN-LAST:event_BackToHomepageActionPerformed

    private void SelectLecturerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectLecturerActionPerformed
        String SelectedOption = (String) SelectLecturer.getSelectedItem();
        
        if (SelectedOption != null && !SelectedOption.equals("Select a Lecturer")){
            String[] parts = SelectedOption.split(" - ", 2);
            
            if (parts.length == 2) {
                String SelectedLecturer = parts[0].trim(); // lecturerID
                
                String slotsFilePath = SelectedLecturer + "availableSlots.txt"; // Set up the filePath for slots

                LocalDateTime now = LocalDateTime.now(); // Current date and time
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm"); // DateTime formatter

                DefaultTableModel model = (DefaultTableModel) ConsultationTable.getModel();
                model.setRowCount(0); // Clear the table

                // Step 2: Read slots for the selected lecturer from their slots file
                try (BufferedReader slotsReader = new BufferedReader(new FileReader(slotsFilePath))) {
                    String line;
                    while ((line = slotsReader.readLine()) != null) {
                        String[] slotData = line.split(",");
                        if (slotData.length == 3) { // Ensure the slot data has 3 columns: Date, Start Time, End Time
                            String date = slotData[0].trim();
                            String startTime = slotData[1].trim();
                            String dateTime = date + " " + startTime;
                            LocalDateTime slotDateTime = LocalDateTime.parse(dateTime, formatter);

                            if (slotDateTime.isAfter(now)) { // Only include future slots
                                model.addRow(new Object[]{slotData[0], slotData[1], slotData[2]});
                            }
                        }
                    }
                    if (model.getRowCount() == 0) {
                        JOptionPane.showMessageDialog(this, "No future slots available for the selected lecturer.", "No Slots", JOptionPane.INFORMATION_MESSAGE);
                    }                   
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Error reading slots file: " + e.getMessage(), "File Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            // If no lecturer is selected, clear the table
            DefaultTableModel model = (DefaultTableModel) ConsultationTable.getModel();
            model.setRowCount(0);
        }
    }//GEN-LAST:event_SelectLecturerActionPerformed

    private void BookConsultationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookConsultationActionPerformed
        int selectedRow = ConsultationTable.getSelectedRow();
        if (selectedRow == -1){
            JOptionPane.showMessageDialog(this, "Please select a row to book the consultation.", "No Row selected", JOptionPane.WARNING_MESSAGE);
            return;
        }
        String date = (String) ConsultationTable.getValueAt(selectedRow, 0);
        String startTime = (String) ConsultationTable.getValueAt(selectedRow, 1);
        String endTime = (String) ConsultationTable.getValueAt(selectedRow, 2);
        
        String selectedLecturer = (String) SelectLecturer.getSelectedItem();
        String lecturerID = selectedLecturer.split(" - ")[0].trim();
        String filePath = lecturerID + "availableSlots.txt";
        
        try{
            List<String> rows = new ArrayList<>();
            String appointmentID = generateAppointmentID();
            
            try(BufferedReader reader = new BufferedReader(new FileReader(filePath))){
                String line;
                while ((line = reader.readLine()) != null){
                    rows.add(line);
                }
            }
            
            for (int i = 0; i < rows.size(); i++){
                String[] parts = rows.get(i).split(",");
                if (parts.length == 3){
                    if  (parts[0].equals(date) && parts[1].equals(startTime) && parts[2].equals(endTime)) {
                        parts = new String[]{appointmentID, parts[0], parts[1], parts[2], studentID, "booked"};
                        rows.set(i, String.join(",", parts));
                        break;
                    }
                }
            }
            
            File file = new File(filePath);
            File directory = file.getParentFile();
            if (directory != null && !directory.exists()) {
                directory.mkdirs();
            }
            
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))){
                for (String row : rows){
                    writer.write(row);
                    writer.newLine();
                }
            }
            
            JOptionPane.showMessageDialog(this, "Consultation booked successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            
            ConsultationTable.setValueAt(studentID, selectedRow, 3);
        } catch (IOException e){
            JOptionPane.showMessageDialog(this, "Error writing to file: " + e.getMessage(), "File Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BookConsultationActionPerformed

    private String generateAppointmentID() {
        return "APT-" + UUID.randomUUID().toString().substring(0,8).toLowerCase();
    }
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackToHomepage;
    private javax.swing.JButton BookConsultation;
    private javax.swing.JTable ConsultationTable;
    private javax.swing.JComboBox<String> SelectLecturer;
    private javax.swing.JLabel Title;
    private javax.swing.JLabel background;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}
