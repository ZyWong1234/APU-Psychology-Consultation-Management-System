import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.DateTimeException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author zhiyo
 */
public class consultationSlots extends javax.swing.JFrame {
    private final String lecturerID;
    private static final String firstSelection = "Please Select";
    /**
     * Creates new form consultationSlots
     * @param lecturerID
     */
    public consultationSlots(String lecturerID) {
        initComponents();
        this.lecturerID = lecturerID;
        
        setTitle("View and Set Available Consultation Slots");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        String fileName = lecturerID + "availableSlots.txt";
        File file = new File(fileName);
        
        try {
            if (file.createNewFile()) {
                System.out.println("File created: " + fileName);
            } else {
                System.out.println("File already exists: " + fileName);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "An error occurred while creating the file.", "File Error", JOptionPane.ERROR_MESSAGE);
        }
        
        removePastSlots();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerLabel = new javax.swing.JLabel();
        yearLabel = new javax.swing.JLabel();
        startTimeLabel = new javax.swing.JLabel();
        availableSlotsLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSlots = new javax.swing.JTable();
        addSlotsButton = new javax.swing.JButton();
        yearBox = new javax.swing.JComboBox<>();
        monthLabel = new javax.swing.JLabel();
        monthBox = new javax.swing.JComboBox<>();
        dayLabel = new javax.swing.JLabel();
        dayBox = new javax.swing.JComboBox<>();
        startTimeBox = new javax.swing.JComboBox<>();
        endTimeBox = new javax.swing.JComboBox<>();
        endTimeLabel = new javax.swing.JLabel();
        setSlotsLabel = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        headerLabel.setFont(new java.awt.Font("Elephant", 1, 24)); // NOI18N
        headerLabel.setText("Manage Consultation Slots");
        getContentPane().add(headerLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 35, -1, -1));

        yearLabel.setText("Year");
        getContentPane().add(yearLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 145, -1, -1));

        startTimeLabel.setText("Start Time");
        getContentPane().add(startTimeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 318, -1, -1));

        availableSlotsLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        availableSlotsLabel.setText("Available Slots");
        getContentPane().add(availableSlotsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(394, 37, -1, -1));

        tableSlots.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Start Time", "End Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableSlots);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(394, 68, 380, 420));

        addSlotsButton.setText("Add Slots");
        addSlotsButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addSlotsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSlotsButtonActionPerformed(evt);
            }
        });
        getContentPane().add(addSlotsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(259, 420, -1, -1));

        yearBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Please Select", "2024", "2025", "2026", "2027", "2028", "2029", "2030", "2031", "2032", "2033", "2034" }));
        yearBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getContentPane().add(yearBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(178, 142, -1, -1));

        monthLabel.setText("Month");
        getContentPane().add(monthLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 204, -1, -1));

        monthBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Please Select", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        monthBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        monthBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthBoxActionPerformed(evt);
            }
        });
        getContentPane().add(monthBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(178, 201, -1, -1));

        dayLabel.setText("Day");
        getContentPane().add(dayLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 263, -1, -1));

        dayBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Please Select", " " }));
        dayBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getContentPane().add(dayBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(178, 260, -1, -1));

        startTimeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Please Select", "08:00", "08:05", "08:10", "08:15", "08:20", "08:25", "08:30", "08:35", "08:40", "08:45", "08:50", "08:55", "09:00", "09:05", "09:10", "09:15", "09:20", "09:25", "09:30", "09:35", "09:40", "09:45", "09:50", "09:55", "10:00", "10:05", "10:10", "10:15", "10:20", "10:25", "10:30", "10:35", "10:40", "10:45", "10:50", "10:55", "11:00", "11:05", "11:10", "11:15", "11:20", "11:25", "11:30", "11:35", "11:40", "11:45", "11:50", "11:55", "12:00", "12:05", "12:10", "12:15", "12:20", "12:25", "12:30", "12:35", "12:40", "12:45", "12:50", "12:55", "13:00", "13:05", "13:10", "13:15", "13:20", "13:25", "13:30", "13:35", "13:40", "13:45", "13:50", "13:55", "14:00", "14:05", "14:10", "14:15", "14:20", "14:25", "14:30", "14:35", "14:40", "14:45", "14:50", "14:55", "15:00", "15:05", "15:10", "15:15", "15:20", "15:25", "15:30", "15:35", "15:40", "15:45", "15:50", "15:55", "16:00", "16:05", "16:10", "16:15", "16:20", "16:25", "16:30", "16:35", "16:40", "16:45", "16:50", "16:55", "17:00", "17:05", "17:10", "17:15", "17:20", "17:25", "17:30", "17:35", "17:40", "17:45", "17:50", "17:55", "18:00" }));
        startTimeBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getContentPane().add(startTimeBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 363, -1, -1));

        endTimeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Please Select", "08:00", "08:05", "08:10", "08:15", "08:20", "08:25", "08:30", "08:35", "08:40", "08:45", "08:50", "08:55", "09:00", "09:05", "09:10", "09:15", "09:20", "09:25", "09:30", "09:35", "09:40", "09:45", "09:50", "09:55", "10:00", "10:05", "10:10", "10:15", "10:20", "10:25", "10:30", "10:35", "10:40", "10:45", "10:50", "10:55", "11:00", "11:05", "11:10", "11:15", "11:20", "11:25", "11:30", "11:35", "11:40", "11:45", "11:50", "11:55", "12:00", "12:05", "12:10", "12:15", "12:20", "12:25", "12:30", "12:35", "12:40", "12:45", "12:50", "12:55", "13:00", "13:05", "13:10", "13:15", "13:20", "13:25", "13:30", "13:35", "13:40", "13:45", "13:50", "13:55", "14:00", "14:05", "14:10", "14:15", "14:20", "14:25", "14:30", "14:35", "14:40", "14:45", "14:50", "14:55", "15:00", "15:05", "15:10", "15:15", "15:20", "15:25", "15:30", "15:35", "15:40", "15:45", "15:50", "15:55", "16:00", "16:05", "16:10", "16:15", "16:20", "16:25", "16:30", "16:35", "16:40", "16:45", "16:50", "16:55", "17:00", "17:05", "17:10", "17:15", "17:20", "17:25", "17:30", "17:35", "17:40", "17:45", "17:50", "17:55", "18:00" }));
        endTimeBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        endTimeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endTimeBoxActionPerformed(evt);
            }
        });
        getContentPane().add(endTimeBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(178, 363, -1, -1));

        endTimeLabel.setText("End Time");
        getContentPane().add(endTimeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(178, 318, -1, -1));

        setSlotsLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        setSlotsLabel.setText("Set Available Slots");
        getContentPane().add(setSlotsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 99, -1, -1));

        backButton.setText("Back");
        backButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        getContentPane().add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 56, -1));

        deleteButton.setText("Delete");
        deleteButton.setToolTipText("");
        deleteButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        getContentPane().add(deleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 270, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/consultation slots background.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addSlotsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSlotsButtonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) tableSlots.getModel();
        
        String year = ((String) yearBox.getSelectedItem()).trim();
        String month = ((String) monthBox.getSelectedItem()).trim();
        String day = ((String) dayBox.getSelectedItem()).trim();
        String startTime = ((String) startTimeBox.getSelectedItem()).trim();
        String endTime = ((String) endTimeBox.getSelectedItem()).trim();
        
        if ("Please Select".equals(year) || "Please Select".equals(month) || "Please Select".equals(day) || "Please Select".equals(startTime) || "Please Select".equals(endTime)) {
        JOptionPane.showMessageDialog(this, "Please fill all fields before adding a slot.", "Information needed", JOptionPane.ERROR_MESSAGE);
        return;
        }
        
        try {
            int yearInt = Integer.parseInt(year);
            int monthInt = Integer.parseInt(month);
            int dayInt = Integer.parseInt(day);
            String[] startParts = startTime.split(":");
            
            if (!startTime.matches("\\d{2}:\\d{2}")) {
            JOptionPane.showMessageDialog(this, "Invalid start time format. Use HH:mm (e.g., 09:00).");
            return;
            }
            
            int startHour = Integer.parseInt(startParts[0].trim());
            int startMinutes = Integer.parseInt(startParts[1].trim());

            String[] endParts = endTime.split(":");
            int endHour = Integer.parseInt(endParts[0].trim());
            int endMinutes = Integer.parseInt(endParts[1].trim());
            
            // Ensure that end time is after start time
            if (startHour > endHour || (startHour == endHour && startMinutes >= endMinutes)) {
                JOptionPane.showMessageDialog(this, "End time must be after start time.", "Invalid Time Selection", JOptionPane.ERROR_MESSAGE);
                return;
            }
        
            LocalDateTime selectedStartDateTime = LocalDateTime.of(yearInt, monthInt, dayInt, startHour, startMinutes);
            LocalDateTime now = LocalDateTime.now();
            
            if (selectedStartDateTime.isBefore(now)) {
                JOptionPane.showMessageDialog(this, "The selected date and time cannot be in the past.", "Invalid Date/Time Selection", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            String date = year + "/" + month + "/" + day; //set up date format as yy/MM/dd
            String slotData = date + "," + startTime + "," + endTime;
            String fileName = lecturerID + "availableSlots.txt";
            File file = new File(fileName);
        
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(file, true))) {
                writer.write(slotData);
                writer.newLine();
                JOptionPane.showMessageDialog(this, "Slot saved successfully.", "Add Slots Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                Logger.getLogger(consultationSlots.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error occurred while saving the slot.");
                return; // Exit method if file writing fails
            }
        
            // Immediately read the file and update the table
            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                String line;
                tableModel.setRowCount(0); // Clear existing data in the table
        
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split(",");
                    if (parts.length == 3) { // Ensure the line is valid
                        tableModel.addRow(parts);
                    }
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error occurred while reading the file.");
            }
        
            reset();
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid number format for date or time.");
        } catch (DateTimeException e) {
            JOptionPane.showMessageDialog(this, "Invalid date or time selected. Please ensure the date exists (e.g., no February 30th).");
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(this, "An unexpected error occurred. Please check your inputs.");
        }
    }//GEN-LAST:event_addSlotsButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void monthBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthBoxActionPerformed
        // TODO add your handling code here:
        updateDayComboBox();
    }//GEN-LAST:event_monthBoxActionPerformed

    private void endTimeBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endTimeBoxActionPerformed
        // Get the selected start and end time values
        String startTime = (String) startTimeBox.getSelectedItem();
        String endTime = (String) endTimeBox.getSelectedItem();

        // If both Start Time and End Time are selected
        if (startTime != null && !startTime.equals("Please Select") &&
            endTime != null && !endTime.equals("Please Select")) {

            // Convert the times to minute values for easy comparison
            String[] startTimeInMinutes = startTime.split(":");
            String[] endTimeInMinutes = endTime.split(":");

            int startHour = Integer.parseInt(startTimeInMinutes[0].trim());
            int startMinute = Integer.parseInt(startTimeInMinutes[1].trim());
            int endHour = Integer.parseInt(endTimeInMinutes[0].trim());
            int endMinute = Integer.parseInt(endTimeInMinutes[1].trim());

            // Compare the start and end times
            if (endHour < startHour || (endHour == startHour && endMinute < startMinute)) {
                JOptionPane.showMessageDialog(this, "End Time cannot be earlier than Start Time.", "Invalid Time", JOptionPane.ERROR_MESSAGE);
                // Reset End Time to the Start Time or next valid time
                endTimeBox.setSelectedItem(startTime);  // Set End Time to Start Time or next valid time
            }
        }
    }//GEN-LAST:event_endTimeBoxActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) tableSlots.getModel();
        int selectedRow = tableSlots.getSelectedRow();
        
        if (selectedRow != -1) {
        
        String slotToDeleteDate = (String) tableSlots.getValueAt(selectedRow, 0);
        String slotToDeleteStartTime = (String) tableSlots.getValueAt(selectedRow, 1);
        String slotToDeleteEndTime = (String) tableSlots.getValueAt(selectedRow, 2);
        
        // Remove the slot from the table
        tableModel.removeRow(selectedRow);
    
        // Re-write the availableSlots.txt file without the deleted slot
        File file = new File(lecturerID + "availableSlots.txt");
        File tempFile = new  File(file.getAbsolutePath() + ".tmp");
        
        try (BufferedReader reader = new BufferedReader(new FileReader(file));
             BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {
        
            String line;
            while ((line = reader.readLine()) != null) {
                // Assuming the file is structured as "date,startTime,endTime"
                String[] parts = line.split(",");
                if (parts.length == 3) {
                    String date = parts[0];
                    String startTime = parts[1];
                    String endTime = parts[2];
                    
                    if (date.equals(slotToDeleteDate) && startTime.equals(slotToDeleteStartTime) && endTime.equals(slotToDeleteEndTime)) {
                        continue;
                    }
                }
                writer.write(line);
                writer.newLine();
            }
        }   catch (FileNotFoundException ex) {
                Logger.getLogger(consultationSlots.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(consultationSlots.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        if (!file.delete()) {
            JOptionPane.showMessageDialog(this, "Error");
        } else if (!tempFile.renameTo(file)) {
            JOptionPane.showMessageDialog(this, "Error renaming.");
        } else {
            JOptionPane.showMessageDialog(this, "Slot deleted.", "Slot Deletion", JOptionPane.INFORMATION_MESSAGE);
        }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        }
    }//GEN-LAST:event_deleteButtonActionPerformed
    
    public void loadSlots(String fileName) {
        DefaultTableModel tableModel = (DefaultTableModel) tableSlots.getModel();
        tableModel.setRowCount(0);
        
        File file = new File(fileName);
        if (file.exists()) {
         try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
        
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length == 3) { // Ensure the line is valid
                    tableModel.addRow(parts);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error.");
        }   
        } else {
            JOptionPane.showMessageDialog(this, "No Existing Slots");
        }
    }
    
    private void reset() {
        yearBox.setSelectedIndex(0);
        monthBox.setSelectedIndex(0);
        dayBox.removeAllItems();
        dayBox.addItem("Please Select");
        
        startTimeBox.setSelectedIndex(0);
        endTimeBox.setSelectedIndex(0);
    }
    
    private void updateDayComboBox() {
        String year = (String) yearBox.getSelectedItem();
        String month = (String) monthBox.getSelectedItem();
        
        if (firstSelection.equals(year) || firstSelection.equals(month)) {
            return;
        }
        
        int yearInt = Integer.parseInt(year);
        int monthInt = Integer.parseInt(month);
        boolean leapYear = false;
        
        if ((yearInt % 4 == 0 && yearInt % 100 != 0) || (yearInt % 400 ==0)) {
            leapYear = true;
        }
                
        int daysInMonth = switch (monthInt) {
            case 2 -> leapYear ? 29 : 28;
            case 4, 6, 9, 11 -> 30;
            default -> 31;
        };
        
        dayBox.removeAllItems();
        dayBox.addItem(firstSelection);
       
        for (int i = 1; i <= daysInMonth; i++) {
            dayBox.addItem(String.format("%02d", i));
        }
    }
    
    private void removePastSlots() {
        String fileName = lecturerID + "availableSlots.txt";
        File file = new File(fileName);
        File tempFile = new File("temp_" + fileName);
        
        LocalDateTime now = LocalDateTime.now();
        
        try (BufferedReader reader = new BufferedReader(new FileReader(file));
                BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {
            
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length == 3) {
                    String date = parts[0].trim();
                    String startTime = parts[1].trim();
                    
                    String dateTime = date + " " + startTime;
                    
                    try {
                        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm");
                        LocalDateTime slotDateTime = LocalDateTime.parse(dateTime, formatter);
                    
                        if (slotDateTime.isBefore(now)) {
                            continue; //skip writing past slots
                        }
                    } catch (DateTimeParseException e) {
                        System.err.println("Invalid date format in line: " + line);
                    }
                }
                
                //write all other lines
                writer.write(line);
                writer.newLine();
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(consultationSlots.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(consultationSlots.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if (file.delete()) {
            tempFile.renameTo(file);
        } else {
            JOptionPane.showMessageDialog(this, "Unable to delete the file.", "File Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addSlotsButton;
    private javax.swing.JLabel availableSlotsLabel;
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox<String> dayBox;
    private javax.swing.JLabel dayLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox<String> endTimeBox;
    private javax.swing.JLabel endTimeLabel;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> monthBox;
    private javax.swing.JLabel monthLabel;
    private javax.swing.JLabel setSlotsLabel;
    private javax.swing.JComboBox<String> startTimeBox;
    private javax.swing.JLabel startTimeLabel;
    private javax.swing.JTable tableSlots;
    private javax.swing.JComboBox<String> yearBox;
    private javax.swing.JLabel yearLabel;
    // End of variables declaration//GEN-END:variables
}
