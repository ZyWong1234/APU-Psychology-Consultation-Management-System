
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Amanda Wang
 */
public class studentFeedback extends javax.swing.JFrame {
    private final String studentID;

    /**
     * Creates new form studentFeedback
     * @param studentID
     */
    public studentFeedback(String studentID) {
        initComponents();
        this.studentID = studentID;
        
        setTitle("Student Feedback");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        loadFeedbackData();
    }
    
    private void loadFeedbackData(){
        DefaultTableModel model = (DefaultTableModel) FeedbackTable.getModel();
        model.setRowCount(0); // this is to clear the existing row
        
        File directory = new File("."); // this is the current directory
        File[] files = directory.listFiles((dir, name) -> name.endsWith("availableSlots.txt"));
        
        if (files == null || files.length == 0){
            System.err.println("No files found that ends with availableSLots.txt");
            return;
        }
        
        File feedbackFile = new File("studentFeedback.txt");
        java.util.Set<String> feedbackAppointmentIDs = new java.util.HashSet<>();
        if (feedbackFile.exists()){
            try (BufferedReader feedbackReader = new BufferedReader(new FileReader(feedbackFile))){
                String line;
                while ((line = feedbackReader.readLine()) != null){
                    String[] feedbackData = line.split(",");
                    if (feedbackData.length > 1){
                        feedbackAppointmentIDs.add(feedbackData[1].trim());
                    }
                }
            } catch (IOException e){
                System.err.println("Error reading feedback file: " + e.getMessage());
            }
        }
        
        for (File file : files){
            //read the lecturerID from the file name
            String lecturerID = file.getName().replace("availableSlots.txt", "");
            
            try (BufferedReader reader = new BufferedReader(new FileReader(file))){
                String line;
                while ((line = reader.readLine()) != null){
                    String[] data = line.split(",");
                    if (data.length >= 6){
                        String appointmentID = data[0].trim();
                        String date = data[1].trim();
                        String startTime = data[2].trim();
                        String endTime = data[3].trim();
                        String student = data[4].trim();
                        String status = data[5].trim();
                        
                        if (feedbackAppointmentIDs.contains(appointmentID)){
                            continue;
                        }
                        
                        if (student.equals(studentID) && status.equalsIgnoreCase("completed")){
                            model.addRow(new Object[]{appointmentID, date, startTime, endTime, lecturerID, status});
                        }
                    }
                }
            } catch (IOException e){
                System.err.println("Error reading the file: " + file.getName());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AppointmentFeedbackTitle = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        FeedbackTable = new javax.swing.JTable();
        ProvideFeedback = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(856, 484));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        AppointmentFeedbackTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        AppointmentFeedbackTitle.setText("Appointment Feedback");
        getContentPane().add(AppointmentFeedbackTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, 270, 40));

        FeedbackTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Appointment ID", "Date", "Start Time", "End Time", "Lecturer ID", "status"
            }
        ));
        jScrollPane1.setViewportView(FeedbackTable);

        jScrollPane2.setViewportView(jScrollPane1);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, 719, 366));

        ProvideFeedback.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        ProvideFeedback.setText("Provide Feedback");
        ProvideFeedback.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ProvideFeedback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProvideFeedbackActionPerformed(evt);
            }
        });
        getContentPane().add(ProvideFeedback, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 430, 210, 43));

        BackButton.setText("Back");
        BackButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });
        getContentPane().add(BackButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 60, -1));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/JavaStudentBackground.png"))); // NOI18N
        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        dispose();
    }//GEN-LAST:event_BackButtonActionPerformed

    private void ProvideFeedbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProvideFeedbackActionPerformed
        int selectedRow = FeedbackTable.getSelectedRow();
        if (selectedRow == -1){
            JOptionPane.showMessageDialog(this, "Please select a row to provide feedback.", "No selection", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) FeedbackTable.getModel();
        String appointmentID = (String) model.getValueAt(selectedRow, 0);
        String date = (String) model.getValueAt(selectedRow, 1);
        String startTime = (String) model.getValueAt(selectedRow, 2);
        String endTime = (String) model.getValueAt(selectedRow, 3);
        String lecturerID = (String) model.getValueAt(selectedRow, 4);
        String status = (String) model.getValueAt(selectedRow, 5);
        
        javax.swing.JPanel panel = new javax.swing.JPanel(new java.awt.GridLayout(2, 1));
        javax.swing.JTextField feedbackField = new javax.swing.JTextField();
        javax.swing.JComboBox<Integer> starsDropdown = new javax.swing.JComboBox<>(new Integer[]{1, 2, 3, 4, 5});
        
        panel.add(new javax.swing.JLabel("Provide your feedback:"));
        panel.add(feedbackField);
        panel.add(new javax.swing.JLabel("Rate (1-5 stars):"));
        panel.add(starsDropdown);
        
        int result = JOptionPane.showConfirmDialog(this, panel, "Provide Feedback", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if (result == JOptionPane.OK_OPTION){
            String feedback = feedbackField.getText().trim();
            int stars = (int) starsDropdown.getSelectedItem();
            
            if (feedback.isEmpty()){
                JOptionPane.showMessageDialog(this, "Feedback cannot be empty.", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            try{
                String feedbackID = "FB-" + System.currentTimeMillis(); //generate the feedback ID itself
                
                String rowData = String.join(",", feedbackID, appointmentID, date, startTime, endTime, lecturerID, studentID, status, feedback, String.valueOf(stars));
                
                File file = new File("studentFeedback.txt");
                try (java.io.FileWriter writer = new java.io.FileWriter(file, true)){
                    writer.write(rowData + System.lineSeparator());
                }
                
                JOptionPane.showMessageDialog(this, "Feedback submitted successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                
                model.removeRow(selectedRow);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error writing feedback: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_ProvideFeedbackActionPerformed

    /**
     * @param args the command line arguments
     */
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AppointmentFeedbackTitle;
    private javax.swing.JButton BackButton;
    private javax.swing.JTable FeedbackTable;
    private javax.swing.JButton ProvideFeedback;
    private javax.swing.JLabel background;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
