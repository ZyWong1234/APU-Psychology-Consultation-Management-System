
import java.awt.GridLayout;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Amanda Wang
 */
public class studentViewAppointment extends javax.swing.JFrame {
    private final String studentID;

    /**
     * Creates new form studentViewAppointment
     * @param studentID
     */
    public studentViewAppointment(String studentID) {
        initComponents();
        this.studentID = studentID;
        
        setTitle("View past and upcoming appointments");
        //let the system open at the center of the computer screen
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        loadAppointmentTable(); //load the data to the table
    }    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AppointmentTitle = new javax.swing.JLabel();
        Past_Appointment = new javax.swing.JLabel();
        Future_Appointment = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Past_Appointment_Table = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        Future_Appointment_Table = new javax.swing.JTable();
        CancelAppointment = new javax.swing.JButton();
        BackToHomepage = new javax.swing.JButton();
        RescheduleSlot = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(856, 484));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        AppointmentTitle.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        AppointmentTitle.setText("Appointment");
        getContentPane().add(AppointmentTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 40, -1, -1));

        Past_Appointment.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Past_Appointment.setText("Past Appointment");
        getContentPane().add(Past_Appointment, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, -1));

        Future_Appointment.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Future_Appointment.setText("Future Appointment");
        getContentPane().add(Future_Appointment, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 110, -1, -1));

        Past_Appointment_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AppointmentID", "Date", "Start Time", "End Time", "Lecturer ID", "Status"
            }
        ));
        jScrollPane1.setViewportView(Past_Appointment_Table);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 550, 410));

        Future_Appointment_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AppointmentID", "Date", "Start Time", "End Time", "Lecturer ID", "Status"
            }
        ));
        jScrollPane2.setViewportView(Future_Appointment_Table);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 150, 570, 410));

        CancelAppointment.setBackground(new java.awt.Color(255, 51, 51));
        CancelAppointment.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        CancelAppointment.setForeground(new java.awt.Color(255, 255, 255));
        CancelAppointment.setText("Cancel Appointment");
        CancelAppointment.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        CancelAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelAppointmentActionPerformed(evt);
            }
        });
        getContentPane().add(CancelAppointment, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 600, 160, 40));

        BackToHomepage.setText("Back");
        BackToHomepage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackToHomepageActionPerformed(evt);
            }
        });
        getContentPane().add(BackToHomepage, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 590, 110, 40));

        RescheduleSlot.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        RescheduleSlot.setText("Reschedule Slot");
        RescheduleSlot.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        RescheduleSlot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RescheduleSlotActionPerformed(evt);
            }
        });
        getContentPane().add(RescheduleSlot, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 600, 170, 40));

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        getContentPane().add(refreshButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 50, -1, -1));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/JavaStudentBackground_appointment.png"))); // NOI18N
        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void BackToHomepageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackToHomepageActionPerformed
        dispose();
    }//GEN-LAST:event_BackToHomepageActionPerformed

    private void CancelAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelAppointmentActionPerformed
        if (Past_Appointment_Table.getSelectedRow() != -1) {
            JOptionPane.showMessageDialog(this, "Past appointments cannot be selected for cancellation.", "Invalid Cancellation", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        int selectedRow = Future_Appointment_Table.getSelectedRow();
        if (selectedRow == -1){
            JOptionPane.showMessageDialog(this, "Please select an appointment to cancel.", "No selection", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        DefaultTableModel futureAppTableModel = (DefaultTableModel) Future_Appointment_Table.getModel();
        
        String appointmentID = (String) futureAppTableModel.getValueAt(selectedRow, 0);
        String lecturerID = (String) futureAppTableModel.getValueAt(selectedRow, 4);
        
        String filePath = lecturerID + "availableSlots.txt";
        
        try {
            List<String> updatedLines = new ArrayList<>();
            boolean isCancelled = false;
            
            try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String [] parts = line.split(",");
                    
                    if (parts.length >= 6 && parts[0].equals(appointmentID)) {
                        String fileStatus = parts[5].trim().toLowerCase();
                        
                        if (fileStatus.equals("original")) {
                            continue;
                        }
                        
                        if (fileStatus.equals("rescheduling") || fileStatus.equals("booked") || fileStatus.equals("rescheduled")) {
                            parts[5] = "cancelled"; //update status
                            isCancelled = true;
                            updatedLines.add(String.join(",", parts));
                            continue;
                        }
                    }
                    updatedLines.add(line); //other lines unchanged
                }
            }
            
            if (!isCancelled) {
                JOptionPane.showMessageDialog(this, "No appointment was cancelled.", "Cancellation failed", JOptionPane.WARNING_MESSAGE);
                return;
            }

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
                for (String row : updatedLines) {
                    writer.write(row);
                    writer.newLine();
                }
            }

            JOptionPane.showMessageDialog(this, "Consultation cancelled successfully!\nPlease click refresh button beside the \"Appointment\" to refresh the table.", "Success", JOptionPane.INFORMATION_MESSAGE);

            // Update the table to reflect the cancellation
            futureAppTableModel.setValueAt("cancelled", selectedRow, 4); // Update the "cancelled" status in the table
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error writing to file: " + e.getMessage(), "File Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_CancelAppointmentActionPerformed

    private void RescheduleSlotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RescheduleSlotActionPerformed
        if (Past_Appointment_Table.getSelectedRow() != -1) {
            JOptionPane.showMessageDialog(this, "Past appointments cannot be selected for cancellation.", "Invalid Cancellation", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        int selectedRow = Future_Appointment_Table.getSelectedRow();
        if (selectedRow == -1){
            JOptionPane.showMessageDialog(this, "Please select an appointment to reschedule.", "No selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        DefaultTableModel futureAppTableModel = (DefaultTableModel) Future_Appointment_Table.getModel();
       
        String appointmentID = (String) futureAppTableModel.getValueAt(selectedRow, 0);
        String originalDate = (String) futureAppTableModel.getValueAt(selectedRow, 1);
        String originalStartTime = (String) futureAppTableModel.getValueAt(selectedRow, 2);
        String originalEndTime = (String) futureAppTableModel.getValueAt(selectedRow, 3);
        String lecturerID = (String) futureAppTableModel.getValueAt(selectedRow, 4);
        String status = (String) futureAppTableModel.getValueAt(selectedRow, 5);
       
        JLabel lecturerLabel = new JLabel("Lecturer: " + lecturerID);
        JComboBox<String> slotsComboBox = new JComboBox<>();
       
        File file = new File(lecturerID + "availableSlots.txt");
        if (!file.exists()) {
            JOptionPane.showMessageDialog(this, "Slots file not found: " + file.getPath(), "File Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split(",");
                    if (parts.length == 3) {  // Ensure that the line has 3 data (date, start, and end time)
                        String slotDate = parts[0].trim();
                        String slotStartTime = parts[1].trim();
                        String slotEndTime = parts[2].trim();

                        // Check if the slot is available and if it's in the future (after the current date and time)
                        LocalDateTime now = LocalDateTime.now();
                        String slotDateTimeStr = slotDate + " " + slotStartTime;
                        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm");
                        LocalDateTime slotDateTime = LocalDateTime.parse(slotDateTimeStr, formatter);

                        if (slotDateTime.isAfter(now)) {  // Only add future slots
                            slotsComboBox.addItem(slotDate + " " + slotStartTime + " - " + slotEndTime);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error reading slots: " + ex.getMessage(), "File Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // If no slots are available
            if (slotsComboBox.getItemCount() == 0) {
                JOptionPane.showMessageDialog(this, "No future slots available for this lecturer.", "No Slots", JOptionPane.WARNING_MESSAGE);
                return;
            }

            JPanel panel = new JPanel(new GridLayout(2,1));
            panel.add(lecturerLabel);
            panel.add(slotsComboBox);

            // Show dialog
            int result = JOptionPane.showConfirmDialog(this, panel, "Reschedule Consultation", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

            if (result == JOptionPane.OK_OPTION) {
                String selectedSlot = (String) slotsComboBox.getSelectedItem();

                if (selectedSlot != null) {
                    String[] slotParts = selectedSlot.split(" ");
                    String newDate = slotParts[0];
                    String newStartTime = slotParts[1];
                    String newEndTime = slotParts[3];

                    // Show confirmation dialog
                    int confirmResult = JOptionPane.showConfirmDialog(
                        this, """
                              Confirm Reschedule?:
                              AppointmentID: """ + appointmentID +
                              "Date: " + newDate + "\nTime: " + newStartTime + " - " + newEndTime,
                              "Reschedule Confirmation",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE
                    );
                        
                    if (confirmResult == JOptionPane.YES_OPTION) {
                        if (status.equalsIgnoreCase("rejected")) {
                            JOptionPane.showMessageDialog(this, "This appointment has been rejected and not able to be rescheduled", "Invalid Reschedule Selection", JOptionPane.ERROR_MESSAGE);
                            return;//exit, do nothing further
                        }
                        try {
                            // Update the lecturer's file with the rescheduled data and the original data in the required format
                            updateFile(file.getPath(), appointmentID, originalDate, newDate, originalStartTime, newStartTime, originalEndTime, newEndTime, studentID);

                            // Update the table with new details
                            futureAppTableModel.setValueAt(newDate, selectedRow, 0);
                            futureAppTableModel.setValueAt(newStartTime, selectedRow, 1);
                            futureAppTableModel.setValueAt(newEndTime, selectedRow, 2);

                            JOptionPane.showMessageDialog(this, "Appointment rescheduled successfully.\nPlease click the refresh button beside the \"Appointment\" to refresh the table.", "Success", JOptionPane.INFORMATION_MESSAGE);
                        } catch (IOException e) {
                            JOptionPane.showMessageDialog(this, "Error updating appointment: " + e.getMessage(), "File Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Reschedule cancelled.", "Cancelled", JOptionPane.INFORMATION_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Please select a time slot.", "No Slot Selected", JOptionPane.WARNING_MESSAGE);
                }
            }
        }           
    }//GEN-LAST:event_RescheduleSlotActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
        // Clear existing data in the tables
        DefaultTableModel pastAppTableModel = (DefaultTableModel) Past_Appointment_Table.getModel();
        DefaultTableModel futureAppTableModel = (DefaultTableModel) Future_Appointment_Table.getModel();
        pastAppTableModel.setRowCount(0);  // Clears past appointments table
        futureAppTableModel.setRowCount(0); // Clears future appointments table

        // Load the data again and update the tables
        loadAppointmentTable();
    }//GEN-LAST:event_refreshButtonActionPerformed
    
    private void updateFile(String filePath, String appointmentID, String originalDate, String newDate, String originalStartTime, 
                        String newStartTime, String originalEndTime, String newEndTime, String studentID) throws IOException {

        List<String> rows = new ArrayList<>();
        boolean lineUpdated = false;
        
        System.out.println("Starting to update the file...");
        System.out.println("File Path: " + filePath);
        System.out.println("Original Appointment: " + originalDate + " " + originalStartTime + " - " + originalEndTime + ", " + studentID);
        System.out.println("New Appointment: " + newDate + " " + newStartTime + " - " + newEndTime);
    
        // Read all lines from the file
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println("Processing line: " + line);
                String[] parts = line.split(",");
                
                //exclude tows that match reschedule appointment details
                if (parts.length >= 3 &&
                        parts[0].trim().equals(newDate) &&
                        parts[1].trim().equals(newStartTime) &&
                        parts[2].trim().equals(newEndTime)) {
                    System.out.println("Skipping duplicate line: " + line);
                    continue; // Skip writing this line back to the file
                }
                
                if (parts.length >= 5 &&
                        parts[0].trim().equals(appointmentID) &&
                        parts[1].trim().equals(originalDate) &&
                        parts[2].trim().equals(originalStartTime) &&
                        parts[3].trim().equals(originalEndTime) &&
                        parts[4].trim().equals(studentID)) {
                    
                    System.out.println("Match found. Updating line...");

                    // Update the original appointment with (original)
                    String updatedOriginalLine = appointmentID + "," +
                                                 originalDate + "," +
                                                 originalStartTime + "," +
                                                 originalEndTime + "," +
                                                 studentID + ",original";
                    rows.add(updatedOriginalLine); // Update the original line
                    System.out.println("Updated Original Line" + updatedOriginalLine);

                    // Add the rescheduled line with (reschedule)
                    String updatedRescheduleLine = appointmentID + "," +
                                                   newDate + "," +
                                                   newStartTime + "," +
                                                   newEndTime + "," +
                                                   studentID + ",rescheduling";
                    rows.add(updatedRescheduleLine); // Add the rescheduled line
                    System.out.println("Updated Rescheduled Line: " + updatedRescheduleLine);

                    lineUpdated = true;
                    
                } else {
                    rows.add(line); // Keep unchanged lines
                }
            }
        }

        if (!lineUpdated) {
            System.out.println("No matching appointment found for update.");
            throw new IOException("Original appointment not found in the file.");
        }

        // Write all lines back to the file
        System.out.println("Writing updated data back to the file...");
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            for (String row : rows) {
                writer.write(row);
                writer.newLine();
            }
        }
        System.out.println("File updated successfully.");
    }


    
    private boolean rowExistsInTable(DefaultTableModel model, String appointmentID, String date, String startTime, String lecturerID) {
        for (int i = 0; i < model.getRowCount(); i++) {
            if (model.getValueAt(i, 0).equals(appointmentID) &&
                model.getValueAt(i, 1).equals(date) &&
                model.getValueAt(i, 2).equals(startTime) &&
                model.getValueAt(i, 4).equals(lecturerID)) {
                return true;
            }
        }
        return false;
    }
    
    // Helper method to check if the line contains a cancelled status
    private boolean lineContainsCancelled(String[] parts) {
        if (parts.length == 5) {
            String status = parts[4].trim();
            return status.equalsIgnoreCase("cancelled");
        }
        return false;
    }
    
    private void loadAppointmentTable() {
        DefaultTableModel pastAppTableModel = (DefaultTableModel) Past_Appointment_Table.getModel();
        DefaultTableModel futureAppTableModel = (DefaultTableModel) Future_Appointment_Table.getModel();

        File folder = new File(".");
        File[] files = folder.listFiles((dir, name) -> name.endsWith("availableSlots.txt"));

        if (files != null){
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy/MM/dd");
            DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");

            for (File file : files){
                String lecturerID = file.getName().replace("availableSlots.txt", "");

                try (BufferedReader reader = new BufferedReader(new FileReader(file))){
                    String line;

                    while ((line = reader.readLine()) != null) {
                        String[] parts = line.split(",");

                        switch (parts.length) {
                            case 6 -> {
                                String appointmentID = parts[0].trim();
                                String date = parts[1].trim();
                                String startTime = parts[2].trim();
                                String endTime = parts[3].trim();
                                String studentInFile = parts[4].trim();
                                String status = parts[5].trim();

                                // Skip original or cancelled appointments
                                if (status.equalsIgnoreCase("original") || status.equalsIgnoreCase("cancelled")) {
                                    continue; // Skip these lines
                                }

                                boolean studentMatches = studentInFile.contains(studentID);
                                boolean isBooked = status.equalsIgnoreCase("booked");
                                boolean isReschedulePending = status.equalsIgnoreCase("rescheduling");
                                boolean isRescheduled = status.equalsIgnoreCase("rescheduled");
                                boolean isRejected = status.equalsIgnoreCase("rejected");

                                // Process lines with matching student IDs
                                if (studentMatches) {
                                    try {
                                        LocalDateTime startDateTime = LocalDateTime.of(
                                                LocalDate.parse(date, dateFormatter),
                                                LocalTime.parse(startTime, timeFormatter)
                                        );

                                        if (startDateTime.isBefore(now)) {
                                            // Add to past appointments (skip cancelled appointments)
                                            if (!lineContainsCancelled(parts) && !rowExistsInTable(pastAppTableModel, appointmentID, date, startTime, lecturerID)) {
                                                pastAppTableModel.addRow(new Object[]{appointmentID, date, startTime, endTime, lecturerID, status});
                                            }
                                        } else {
                                            // Add to future appointments with reschedule status
                                            String rescheduleStatus = isReschedulePending ? "Pending" : isRescheduled ? "rescheduled" : isRejected ? "Rejected" : isBooked ? "Booked" : "";
                                            if (!rowExistsInTable(futureAppTableModel, appointmentID, date, startTime, lecturerID)) {
                                                futureAppTableModel.addRow(new Object[]{appointmentID, date, startTime, endTime, lecturerID, rescheduleStatus});
                                            }
                                        }
                                    } catch (DateTimeParseException e) {
                                        System.err.println("Invalid date/time format: " + line);
                                    }
                                }
                            }
                            default -> {
                                // Debugging: Print line length issues
                                System.out.println("Skipping invalid line (Incorrect column count): " + line);
                            }
                        }
                    }
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(studentViewAppointment.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(studentViewAppointment.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }



    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AppointmentTitle;
    private javax.swing.JButton BackToHomepage;
    private javax.swing.JButton CancelAppointment;
    private javax.swing.JLabel Future_Appointment;
    private javax.swing.JTable Future_Appointment_Table;
    private javax.swing.JLabel Past_Appointment;
    private javax.swing.JTable Past_Appointment_Table;
    private javax.swing.JButton RescheduleSlot;
    private javax.swing.JLabel background;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton refreshButton;
    // End of variables declaration//GEN-END:variables
}
