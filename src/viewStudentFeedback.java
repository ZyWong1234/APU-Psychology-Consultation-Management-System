
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author zhiyo
 */
public class viewStudentFeedback extends javax.swing.JFrame {
    private final String lecturerID;
    /**
     * Creates new form viewStudentFeedback
     * @param lecturerID
     */
    public viewStudentFeedback(String lecturerID) {
        initComponents();
        this.lecturerID = lecturerID;
        
        setTitle("View Student Feedback");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        DefaultTableModel appointmentTableModel = (DefaultTableModel) appointmentTable.getModel();
        
        String fileName = "studentFeedback.txt";
        
        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
            String line;
            appointmentTableModel.setRowCount(0);
            
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                
                if (parts.length == 10) {
                    String appointmentID = parts[1].trim();
                    String date = parts[2].trim();
                    String startTime = parts[3].trim();
                    String endTime = parts[4].trim();
                    String lecturerIDInFile = parts[5].trim();
                    String studentID = parts[6].trim();
                    String status = parts[7].trim();
                    
                    if (lecturerIDInFile.equals(lecturerID) && status.equalsIgnoreCase("completed")) {
                        appointmentTableModel.addRow(new Object[]{appointmentID, date, startTime,endTime, studentID, status});
                    }
                }
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error loading appointment data.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        feedbackLabel = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        appointmentTable = new javax.swing.JTable();
        feedbackButton = new javax.swing.JButton();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        feedbackLabel.setFont(new java.awt.Font("Elephant", 1, 24)); // NOI18N
        feedbackLabel.setText("Student Feedback");
        getContentPane().add(feedbackLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 35, -1, -1));

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        getContentPane().add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 56, -1));

        appointmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AppointmentID", "Date", "Start Time", "End Time", "Student ID", "Status"
            }
        ));
        jScrollPane1.setViewportView(appointmentTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 72, 802, 389));

        feedbackButton.setText("View Feedback");
        feedbackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feedbackButtonActionPerformed(evt);
            }
        });
        getContentPane().add(feedbackButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(719, 43, -1, -1));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/consultation slots background.jpg"))); // NOI18N
        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void feedbackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feedbackButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = appointmentTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a valid appointment.", "Selection Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        DefaultTableModel appointmentTableModel = (DefaultTableModel) appointmentTable.getModel();
        
        String appointmentID = (String) appointmentTableModel.getValueAt(selectedRow, 0);
        String date = (String) appointmentTableModel.getValueAt(selectedRow, 1);
        String startTime = (String) appointmentTableModel.getValueAt(selectedRow, 2);
        String endTime = (String) appointmentTableModel.getValueAt(selectedRow, 3);
        String studentID = (String) appointmentTableModel.getValueAt(selectedRow, 4);
        String status = (String) appointmentTableModel.getValueAt(selectedRow, 5);
        
        String filePath = "studentFeedback.txt";
        
        boolean feedbackFound = false;
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                
                if (parts.length >= 10 && parts[1].equals(appointmentID)
                        && parts[5].equals(lecturerID) && parts[6].equals(studentID)) {
                    String feedback = parts[8].trim();
                    String rating = parts[9].trim();
                    
                    showDetailsDialog("AppointmentID: " + appointmentID + "\n"
                    + "Date: " + date + "\n"
                    + "Start Time: " + startTime + "\n"
                    + "End Time: " + endTime + "\n"
                    + "StudentID: " + studentID + "\n"
                    + "Status: " + status + "\n"
                    + "Rating: " + rating + " stars\n"
                    + "Feedback: " + feedback);
                    feedbackFound = true;
                    break;
                }
            }
            
            if (!feedbackFound) {
                JOptionPane.showMessageDialog(null, "No feedback found for the selected appointment.",
                                              "Feedback Not Found", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Does not have any feedback yet.",
                                          "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_feedbackButtonActionPerformed
    
    private void showDetailsDialog(String details) {
        JOptionPane.showMessageDialog(null, details, 
                                      "Appointment Feedback", JOptionPane.INFORMATION_MESSAGE);
    }
    
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable appointmentTable;
    private javax.swing.JButton backButton;
    private javax.swing.JLabel background;
    private javax.swing.JButton feedbackButton;
    private javax.swing.JLabel feedbackLabel;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
