
import java.awt.GridLayout;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author zhiyo
 */
public class consultationFeedback extends javax.swing.JFrame {
    private final String lecturerID;

    /**
     * Creates new form consultationFeedback
     * @param lecturerID
     */
    public consultationFeedback(String lecturerID) {
        initComponents();
        this.lecturerID = lecturerID;
        
        setTitle("Consultation Feedback");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        loadTableData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        consultFeedbackLabel = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        consultFeedbackTable = new javax.swing.JTable();
        feedbackButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        consultFeedbackLabel.setFont(new java.awt.Font("Elephant", 1, 24)); // NOI18N
        consultFeedbackLabel.setText("Consultation Feedback");
        getContentPane().add(consultFeedbackLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 35, -1, -1));

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        getContentPane().add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 56, -1));

        consultFeedbackTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Appointment ID", "Date", "Start Time", "End Time", "Student ID", "Status"
            }
        ));
        jScrollPane1.setViewportView(consultFeedbackTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 72, 691, 400));

        feedbackButton.setText("Provide Feedback");
        feedbackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feedbackButtonActionPerformed(evt);
            }
        });
        getContentPane().add(feedbackButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(727, 221, -1, 55));

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        getContentPane().add(refreshButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 40, -1, -1));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/consultation slots background.jpg"))); // NOI18N
        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void feedbackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feedbackButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = consultFeedbackTable.getSelectedRow();
        if (selectedRow == -1){
            JOptionPane.showMessageDialog(this, "Please select an appointment to provide feedback.", "No selection", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        DefaultTableModel feedbackTable = (DefaultTableModel) consultFeedbackTable.getModel();
        
        String appointmentID = (String) feedbackTable.getValueAt(selectedRow, 0);
        String date = (String) feedbackTable.getValueAt(selectedRow, 1);
        String startTime = (String) feedbackTable.getValueAt(selectedRow, 2);
        String endTIme = (String) feedbackTable.getValueAt(selectedRow, 3);
        String studentID = (String) feedbackTable.getValueAt(selectedRow, 4);
        String status = (String) feedbackTable.getValueAt(selectedRow, 5);
        
        JLabel appointmentIDLabel = new JLabel("AppointmentID: " + appointmentID);
        JLabel studentLabel = new JLabel("Student ID: " + studentID);
        JLabel dateLabel = new JLabel("Date: " + date);
        JLabel timeLabel = new JLabel("Time: " + startTime + " - " + endTIme);
        JLabel statusLabel = new JLabel("Status: " + status);
        JLabel emptyLabel = new JLabel();
        JLabel feedbackLabel = new JLabel("Feedback: ");
        JTextField feedbackField = new JTextField(20);
        
        JPanel panel = new JPanel(new GridLayout(6,1));
        panel.add(appointmentIDLabel);
        panel.add(studentLabel);
        panel.add(dateLabel);
        panel.add(timeLabel);
        panel.add(statusLabel);
        panel.add(emptyLabel);
        panel.add(feedbackLabel);
        panel.add(feedbackField);
        
        int result = JOptionPane.showConfirmDialog(this, panel, "Feedback", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        
        if (result == JOptionPane.OK_OPTION) {
            String feedback = feedbackField.getText().trim();
            
            if (feedback.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Feedback cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            String filePath = lecturerID + "availableSlots.txt";
            try {
                List<String> updatedLines = new ArrayList<>();
                
                try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        String[] parts = line.split(",");
                        
                        if (parts.length >= 6 && parts[0].equals(appointmentID) && parts[4].equals(studentID)) {
                            if (parts.length == 6) {
                                line += "," + feedback; // append feedback to the back of the line
                            } else if (parts.length > 6) {
                                parts[6] = feedback; //update existing feedback if have
                                line = String.join(",", parts);
                            }
                        }
                        updatedLines.add(line);
                    }
                }
                try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
                    for (String updatedLine : updatedLines) {
                        writer.write(updatedLine);
                        writer.newLine();
                    }
                }
                JOptionPane.showMessageDialog(this, "Feedback saved successfully!", "Feedback Successfull", JOptionPane.INFORMATION_MESSAGE);
                
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error updating feedback: " + e.getMessage(), "File Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_feedbackButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:       
        loadTableData();
    }//GEN-LAST:event_refreshButtonActionPerformed
    
    private void loadTableData() {
        DefaultTableModel feedbackTable = (DefaultTableModel) consultFeedbackTable.getModel();
        
        String filePath = lecturerID + "availableSlots.txt";
        File file = new File(filePath);
        
        if (!file.exists()) {
            JOptionPane.showMessageDialog(this, "File not found: " + filePath, "File Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            feedbackTable.setRowCount(0);

            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy/MM/dd");
            DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");
                
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                    
                if (parts.length == 6) {
                    String appointmentID = parts[0].trim();
                    String date = parts[1].trim();
                    String startTime = parts[2].trim();
                    String endTime = parts[3].trim();
                    String studentID = parts[4].trim();
                    String status = parts[5].trim();
                        
                    try {
                        LocalDate dateParsed = LocalDate.parse(date, dateFormatter);
                        LocalTime timeParsed = LocalTime.parse(startTime, timeFormatter);
                        
                        LocalDateTime startDateTime = LocalDateTime.of(dateParsed, timeParsed);
                            
                        if (startDateTime.isBefore(now) && status.equalsIgnoreCase("completed")) {
                            feedbackTable.addRow(new Object[]{appointmentID, date, startTime, endTime, studentID, status});
                        }
                          
                    } catch (DateTimeParseException e) {
                        System.err.println("Invalid date/time format in line: " + line);
                    }
                }
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error reading file: " + ex.getMessage(), "File Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JLabel background;
    private javax.swing.JLabel consultFeedbackLabel;
    private javax.swing.JTable consultFeedbackTable;
    private javax.swing.JButton feedbackButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshButton;
    // End of variables declaration//GEN-END:variables
}
