
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author zhiyo
 */
public class viewAppointments extends javax.swing.JFrame {
    private final String lecturerID;
    /**
     * Creates new form viewAppointments
     * @param lecturerID
     */
    public viewAppointments(String lecturerID) {
        initComponents();
        this.lecturerID = lecturerID;
        
        setTitle("View Past and Upcoming Appointments");
        //let the window open at the center of the screen
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        //load the data from txt file to the table
        loadTableSlots();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewAppointmentLabel = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        upcomingAppLabel = new javax.swing.JLabel();
        pastAppLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pastAppTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        upcomingAppTable = new javax.swing.JTable();
        completeButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        viewAppointmentLabel.setFont(new java.awt.Font("Elephant", 1, 24)); // NOI18N
        viewAppointmentLabel.setText("View Appointments");
        getContentPane().add(viewAppointmentLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 34, -1, -1));

        backButton.setText("Back");
        backButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        getContentPane().add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 56, -1));

        upcomingAppLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        upcomingAppLabel.setText("Upcoming Appointments");
        getContentPane().add(upcomingAppLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 120, -1, -1));

        pastAppLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        pastAppLabel.setText("Past Appointments");
        getContentPane().add(pastAppLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, -1, -1));

        pastAppTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AppointmentID", "Date", "Start Time", "End Time", "Student ID", "Status"
            }
        ));
        jScrollPane1.setViewportView(pastAppTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 560, 490));

        upcomingAppTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AppointmentID", "Date", "Start Time", "End Time", "Student ID", "Status"
            }
        ));
        jScrollPane2.setViewportView(upcomingAppTable);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 150, 560, 490));

        completeButton.setText("Complete");
        completeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(completeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 120, -1, -1));

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        getContentPane().add(refreshButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 120, -1, -1));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/consultation slots background_appointment.jpg"))); // NOI18N
        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void completeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeButtonActionPerformed
        // TODO add your handling code here:
        
        //if selection in upcoming table exists, display warning message
        if (upcomingAppTable.getSelectedRow() != -1) {
            JOptionPane.showMessageDialog(this, 
                    "Upcoming appointments cannot be selected for completed.", 
                    "Invalid Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        int selectedRow = pastAppTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, 
                    "Please select an appointment that has been completed.",
                    "No selection", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        DefaultTableModel pastAppTableModel = (DefaultTableModel) pastAppTable.getModel();
        
        String appointmentID = (String) pastAppTableModel.getValueAt(selectedRow, 0);
        String studentID = (String) pastAppTableModel.getValueAt(selectedRow, 4);
        String status = (String) pastAppTableModel.getValueAt(selectedRow, 5);
        
        if (!status.equalsIgnoreCase("booked") && !status.equalsIgnoreCase("rescheduled")) {
            JOptionPane.showMessageDialog(this, 
                    "Only booked or confirmed appointments can be marked as completed.", 
                    "Invalid Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String filePath = lecturerID + "availableSlots.txt";
        
        try {
            List<String> updatedLines = new ArrayList<>();
            boolean isCompleted = false;
            
            try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String [] parts = line.split(",");
                    
                    if (parts.length >= 6 && parts[0].equals(appointmentID) 
                            && parts[4].equals(studentID)) {
                        String fileStatus = parts[5].trim().toLowerCase();
                        
                        int result = JOptionPane.showConfirmDialog(this, 
                                "Appointment Completed?", "Appointment Completion", 
                                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
                        
                        if (result == JOptionPane.OK_OPTION) {
                            if (fileStatus.equals("booked") || fileStatus.equals("rescheduled")) {
                                parts[5] = "completed"; //update status
                                isCompleted = true;
                                updatedLines.add(String.join(",", parts));
                            } else {
                                //if status is not "booked" or "rescheduled"
                                updatedLines.add(line);
                            }
                        } else {
                            updatedLines.add(line); //if user cancel, keep the line unchanged
                        }                    
                    } else {
                        updatedLines.add(line); // add unchanged lines to list
                    }
                }
            }
            
            if (!isCompleted) {
                JOptionPane.showMessageDialog(this, "No appointment was completed.",
                        "Completion failed", JOptionPane.WARNING_MESSAGE);
                return;
            }

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
                for (String row : updatedLines) {
                    writer.write(row);
                    writer.newLine();
                }
            }

            JOptionPane.showMessageDialog(this, 
                    "Consultation completed successfully!",
                    "Completion Success", JOptionPane.INFORMATION_MESSAGE);

            // Update the table to reflect the completion
            pastAppTableModel.setValueAt("Completed", selectedRow, 5); // Update the "cancelled" status in the table
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error writing to file: " + e.getMessage(), "File Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_completeButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
        loadTableSlots();
    }//GEN-LAST:event_refreshButtonActionPerformed
    
    private void loadTableSlots() {
        DefaultTableModel pastAppTableModel = (DefaultTableModel) pastAppTable.getModel();
        DefaultTableModel upcomingAppTableModel = (DefaultTableModel) upcomingAppTable.getModel();
        
        String fileName = lecturerID + "availableSlots.txt";
        
        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
            String line;
            pastAppTableModel.setRowCount(0); // Clear existing data in the table
            upcomingAppTableModel.setRowCount(0);
                
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy/MM/dd");
            DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");
        
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length >= 4) { // Ensure the line is valid
                    String appointmentID = parts[0].trim();
                    String date = parts[1].trim();
                    String startTime = parts[2].trim();
                    String endTime = parts[3].trim();
                    String studentID = parts[4].trim();
                    String status = parts[5].trim();
                        
                    try {
                        LocalDate dateParsed = LocalDate.parse(date, dateFormatter);
                        LocalTime timeParsed = LocalTime.parse(startTime, timeFormatter);
                            
                        LocalDateTime startDateTime = LocalDateTime.of(dateParsed, timeParsed);
                            
                        if (startDateTime.isBefore(now)) {
                            pastAppTableModel.addRow(new Object[]{appointmentID, date, startTime, endTime, studentID, status});
                        } else {
                            upcomingAppTableModel.addRow(new Object[]{appointmentID, date, startTime, endTime, studentID, status});
                        }
                    } catch (DateTimeParseException e) {
                        System.err.println("Invalid date/time format in line: " + line);
                    }
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error occurred while reading the file." + fileName, 
                    "File Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JLabel background;
    private javax.swing.JButton completeButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel pastAppLabel;
    private javax.swing.JTable pastAppTable;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLabel upcomingAppLabel;
    private javax.swing.JTable upcomingAppTable;
    private javax.swing.JLabel viewAppointmentLabel;
    // End of variables declaration//GEN-END:variables
}
